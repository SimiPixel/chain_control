import numpy as np 
import dm_env
from dataclasses import dataclass
from typing import Union 
from ..types import PyTree


@dataclass
class AbstractReplayElement:
    """Should not be used! Only used in definition of `ReplayElement`
    """
    pass 


@dataclass
class ReplayElement(AbstractReplayElement):
    """Atomic transition tuple generated by actor
    """
    timestep: dm_env.TimeStep
    action: np.ndarray
    next_timestep: dm_env.TimeStep
    prev: Union[None, AbstractReplayElement]
    actor_id: Union[int, None] 
    episode_id: int
    timestep_id: int 
    extras: PyTree 

    def __repr__(self) -> str:
        prev = "ReplayElement(...)" if self.prev else "None"
        return f"ReplayElement(timestep={self.timestep}, action={self.action},next_timestep={self.next_timestep}, prev={prev}, actor_id={self.actor_id},episode_id={self.episode_id}, timestep_id={self.timestep_id}"